// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Motorcycle_Rental_Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250907155552_Include property DailyValue in Location")]
    partial class IncludepropertyDailyValueinLocation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Motorcycle_Rental_Domain.Models.DeliveryMan", b =>
                {
                    b.Property<string>("Identifier")
                        .HasColumnType("VARCHAR(36)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CNHImage")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("ImageCnh");

                    b.Property<string>("CNHNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("VARCHAR(15)");

                    b.Property<string>("CNHType")
                        .IsRequired()
                        .HasColumnType("VARCHAR(10)");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("VARCHAR(14)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)");

                    b.HasKey("Identifier");

                    b.HasIndex("CNHNumber")
                        .IsUnique();

                    b.HasIndex("CNPJ")
                        .IsUnique();

                    b.ToTable("DeliveryMans", (string)null);
                });

            modelBuilder.Entity("Motorcycle_Rental_Domain.Models.Location", b =>
                {
                    b.Property<string>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARCHAR(100)");

                    b.Property<int>("DailyValue")
                        .HasColumnType("integer");

                    b.Property<string>("DeliveryMan_Id")
                        .IsRequired()
                        .HasColumnType("VARCHAR(36)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EstimatedEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Motorcycle_Id")
                        .IsRequired()
                        .HasColumnType("VARCHAR(36)");

                    b.Property<int>("Plan")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("LocationId");

                    b.HasIndex("DeliveryMan_Id")
                        .IsUnique();

                    b.HasIndex("Motorcycle_Id")
                        .IsUnique();

                    b.ToTable("Locations", (string)null);
                });

            modelBuilder.Entity("Motorcycle_Rental_Domain.Models.Motorcycle", b =>
                {
                    b.Property<string>("Identifier")
                        .HasColumnType("VARCHAR(36)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Identifier");

                    b.HasIndex("Plate")
                        .IsUnique();

                    b.ToTable("Motorcycles", (string)null);
                });

            modelBuilder.Entity("Motorcycle_Rental_Domain.Models.MotorcycleNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Motorcycle_Rental_Domain.Models.Location", b =>
                {
                    b.HasOne("Motorcycle_Rental_Domain.Models.DeliveryMan", "DeliveryMan")
                        .WithOne("Location")
                        .HasForeignKey("Motorcycle_Rental_Domain.Models.Location", "DeliveryMan_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Motorcycle_Rental_Domain.Models.Motorcycle", "Motorcycle")
                        .WithOne("Location")
                        .HasForeignKey("Motorcycle_Rental_Domain.Models.Location", "Motorcycle_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliveryMan");

                    b.Navigation("Motorcycle");
                });

            modelBuilder.Entity("Motorcycle_Rental_Domain.Models.DeliveryMan", b =>
                {
                    b.Navigation("Location")
                        .IsRequired();
                });

            modelBuilder.Entity("Motorcycle_Rental_Domain.Models.Motorcycle", b =>
                {
                    b.Navigation("Location")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
